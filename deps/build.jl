using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcalceph"], :libcalceph),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/CALCEPHBuilder/releases/download/v3.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/libcalceph.aarch64-linux-gnu.tar.gz", "0a3ad4729988d433fe4798d02af9a12f6ac58175148767aadf7fd54c64ce3ec1"),
    Linux(:aarch64, :musl) => ("$bin_prefix/libcalceph.aarch64-linux-musl.tar.gz", "d5474db681142b844cfa6b946abadb63729bc5e360e01297e21911a6cd0c20f5"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/libcalceph.arm-linux-gnueabihf.tar.gz", "f97417b2ee7817e9b852f3247045c00e301ef89f89ac49ccfe19d9763c935e18"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/libcalceph.arm-linux-musleabihf.tar.gz", "2de7cb87ebfdd5eabb927992c64ba6945dd954d71f6c157909913b5640d9bc80"),
    Linux(:i686, :glibc) => ("$bin_prefix/libcalceph.i686-linux-gnu.tar.gz", "f57e0e5cae04c904e22145da5cbd4f66f6b069816fd2ad61f0b6730d7747fff7"),
    Linux(:i686, :musl) => ("$bin_prefix/libcalceph.i686-linux-musl.tar.gz", "652a3d9aede3f710785fc571c3fe5fd1b936f47a2e7a38a1f2ae26d88c18193d"),
    Windows(:i686) => ("$bin_prefix/libcalceph.i686-w64-mingw32.tar.gz", "d70e063ceaa6e5a6786813742d19735927508e0f1b081fff4c935921c13213b1"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/libcalceph.powerpc64le-linux-gnu.tar.gz", "6849dca38f475ee3400f1f8dc32caec0a7708b8b74cac99b27b8a400cf865a77"),
    MacOS(:x86_64) => ("$bin_prefix/libcalceph.x86_64-apple-darwin14.tar.gz", "48b6b47f9c0d4ab2226c419ea29d30954d77c556549bcb22bd9b22a985a5a755"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libcalceph.x86_64-linux-gnu.tar.gz", "c71f1aa3271e0fd88ef1a3dfc37def2abb04a3039c727b004da07e3ecf4bca9f"),
    Linux(:x86_64, :musl) => ("$bin_prefix/libcalceph.x86_64-linux-musl.tar.gz", "81bd62450ec843a952ff466a74b8f4a97ddbbf71ce9def48933ee5c58eae2cbb"),
    FreeBSD(:x86_64) => ("$bin_prefix/libcalceph.x86_64-unknown-freebsd11.1.tar.gz", "200d244af611ae8347724464287923591cb1c632d7f8017ce83ca6ddb4c87d52"),
    Windows(:x86_64) => ("$bin_prefix/libcalceph.x86_64-w64-mingw32.tar.gz", "74c42d7b6f2fd86dfd355688b608b1e170c8de89308991d1de859e8c7f8cc514"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
    # Write out a deps.jl file that will contain mappings for our products
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
    exit(0)
end

info("Could not find a binary for your platform $(triplet(platform_key())). Will attempt a build.")

using BinDeps
@BinDeps.setup

libcalceph = library_dependency("libcalceph")
provides(Sources,URI("https://www.imcce.fr/content/medias/recherche/equipes/asd/calceph/calceph-3.1.0.tar.gz"), libcalceph)

provides(BuildProcess,Autotools(configure_options =
        ["--enable-shared", "--disable-fortran", "--disable-python"],
        libtarget=joinpath("src", "libcalceph.la")),libcalceph, os = :Unix)

@BinDeps.install Dict(:libcalceph => :libcalceph)

