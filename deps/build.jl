using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcalceph"], :libcalceph),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/CALCEPH_jll.jl/releases/download/CALCEPH-v3.4.2+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/CALCEPH.v3.4.2.aarch64-linux-gnu.tar.gz", "29967a4dbaead1d94c1067ab56d2fb0025077f357a8aa8e667f5523a96b326c0"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/CALCEPH.v3.4.2.aarch64-linux-musl.tar.gz", "8644bb84703ecf6cd4718ab31dc6da890cedf57a1329394ab931c532a5297c9f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/CALCEPH.v3.4.2.armv7l-linux-gnueabihf.tar.gz", "4372b6163f28463050598f79ae47f2a478ff2b4edf7f95d11b005eea3931cfb3"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/CALCEPH.v3.4.2.armv7l-linux-musleabihf.tar.gz", "23fdd9c7b86c404f8bd47f4768bf883446bb52b0a50666fd5cdb05193b1208aa"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/CALCEPH.v3.4.2.i686-linux-gnu.tar.gz", "ca556aee3e28946731b1f55436e3bf6aeb54c1e0561a9c620f61fb2f02f2b45e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/CALCEPH.v3.4.2.i686-linux-musl.tar.gz", "d58f132add012a58a4986b3a3cb918b62e71c8fc39f0bfce2948c3e7be2a5769"),
    Windows(:i686) => ("$bin_prefix/CALCEPH.v3.4.2.i686-w64-mingw32.tar.gz", "038f3dae90534b61903746898a4298fec814613971cb36d00e943eb12b4295e8"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/CALCEPH.v3.4.2.powerpc64le-linux-gnu.tar.gz", "b54964f42dbcc66a0d9a385a1216c5f31645a0e0ee3539680c2e8f26cd8a8732"),
    MacOS(:x86_64) => ("$bin_prefix/CALCEPH.v3.4.2.x86_64-apple-darwin14.tar.gz", "1a59f3b4cfac3e45364259eaff71cd3e8edc9f0a35dc802045961d5913f0903e"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/CALCEPH.v3.4.2.x86_64-linux-gnu.tar.gz", "2ff6777c250e2f7f95c98bae6eafdc57d2c5ee6e6c303039e931eb89b43286ac"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/CALCEPH.v3.4.2.x86_64-linux-musl.tar.gz", "278ed2e3e4709ce2408bf8a4bc36797feae1422c26b62a351c9a10f6710fe54e"),
    FreeBSD(:x86_64) => ("$bin_prefix/CALCEPH.v3.4.2.x86_64-unknown-freebsd11.1.tar.gz", "e4f53c8949d64cb13de73d040514e244272c174a547400cc29fd72412099bc1e"),
    Windows(:x86_64) => ("$bin_prefix/CALCEPH.v3.4.2.x86_64-w64-mingw32.tar.gz", "7106cccde355c3bdf2ec76696e1f183833a3f2e46ede7d2b4b39b48085a40b61"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
